"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiDataStoresUrlConstruction = void 0;
const SortDirection_1 = require("../Enumeration/SortDirection");
const UrlTool_1 = require("../Tools/UrlTool");
/**
 * @internal
 */
class ApiDataStoresUrlConstruction {
    static setCharAt(str, index, chr) {
        if (index > str.length - 1)
            return str;
        return str.substring(0, index) + chr + str.substring(index + 1);
    }
    static constructListKeysUrl(datastoreName, universeId, prefix, maxItemsToReturn) {
        let result = '';
        let query = '';
        result = UrlTool_1.UrlHelper.BuildGenericPersistenceV2Url(`${universeId}/datastores`);
        if (datastoreName !== undefined) {
            result += '/objects';
            query = `&datastore=${encodeURIComponent(datastoreName)}`;
        }
        if (prefix.length > 0) {
            query += `&prefix=${encodeURIComponent(prefix)}`;
        }
        if (maxItemsToReturn > 0) {
            query += `&maxItemsToReturn=${encodeURIComponent(maxItemsToReturn)}`;
        }
        if (query.length > 0 && query[0] === '&')
            query = ApiDataStoresUrlConstruction.setCharAt(query, 0, '');
        result += `${query.length > 0 ? '?' : ''}${query}`;
        return result;
    }
    static constructListVersionsUrl(datastoreName, universeId, objectKey, pageSize, minDate, maxDate, sortDirection) {
        let query = '';
        if (datastoreName.length > 0) {
            query = `&datastore=${encodeURIComponent(datastoreName)}`;
        }
        if (objectKey.length > 0) {
            query += `&objectKey=${encodeURIComponent(objectKey)}`;
        }
        query += `&sortDirection=${encodeURIComponent(SortDirection_1.SortDirection[sortDirection])}`;
        if (minDate > 1) {
            query += `&startTime=${encodeURIComponent(new Date(minDate).toISOString())}`;
        }
        if (maxDate > 1) {
            query += `&endTime=${encodeURIComponent(new Date(maxDate).toISOString())}`;
        }
        if (pageSize > 0) {
            query += `&maxItemsToReturn=${encodeURIComponent(pageSize)}`;
        }
        if (query.length > 0 && query[0] === '&')
            query = ApiDataStoresUrlConstruction.setCharAt(query, 0, '');
        return `${UrlTool_1.UrlHelper.BuildGenericPersistenceV2Url(`${universeId}/datastores/objects/object/versions`)}${query.length > 0 ? '?' : ''}${query}`;
    }
    static constructObjectOpUrl(datastore, objectKey, universeId) {
        let result = '';
        result = UrlTool_1.UrlHelper.BuildGenericPersistenceV2Url(`${universeId}/datastores/objects/object`);
        result += `?datastore=${encodeURIComponent(datastore)}&objectKey=${encodeURIComponent(objectKey)}`;
        return result;
    }
    static constructIncrementOpUrl(datastore, objectKey, universeId, delta) {
        let result = '';
        result = UrlTool_1.UrlHelper.BuildGenericPersistenceV2Url(`${universeId}/datastores/objects/object/increment`);
        result += `?datastore=${encodeURIComponent(datastore)}&objectKey=${encodeURIComponent(objectKey)}&incrementBy=${delta}`;
        return result;
    }
    static constructVersionOpUrl(datastore, objectKey, universeId, version) {
        let result = ApiDataStoresUrlConstruction.constructObjectOpUrl(datastore, objectKey, universeId);
        if (version !== undefined)
            result += `&version=${encodeURIComponent(version)}`;
        return result;
    }
}
exports.ApiDataStoresUrlConstruction = ApiDataStoresUrlConstruction;
