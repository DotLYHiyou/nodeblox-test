import { DataStoreSetOptions } from './DataStoreSetOptions';
import { DataStoreIncrementOptions } from './DataStoreIncrementOptions';
import { RBXScriptConnection } from './RBXScriptConnection';
import { DataStoreKeyInfo } from './DataStoreKeyInfo';
/**
 * A **GlobalDataStore** exposes functions for saving and loading data for the [DataStoreService](https://developer.roblox.com/en-us/api-reference/class/DataStoreService).
 * See the [Data Stores](https://developer.roblox.com/en-us/articles/Data-store) article for an in-depth guide on data structure, management, error handling, etc.
 */
export declare class GlobalDataStore {
    /**
     * This function returns the latest value of the provided key and a [DataStoreKeyInfo](https://developer.roblox.com/en-us/api-reference/class/DataStoreKeyInfo) instance.
     * If the key does not exist or if the latest version has been marked as deleted, both return values will be nil.
     *
     * ---
     * WARNING
     * --------
     * [OrderedDataStore](https://developer.roblox.com/en-us/api-reference/class/OrderedDataStore) does not support v2.0 features such as versioning and metadata,
     * so [DataStoreKeyInfo](https://developer.roblox.com/en-us/api-reference/class/DataStoreKeyInfo) will always be `nil` for keys in an [OrderedDataStore](https://developer.roblox.com/en-us/api-reference/class/OrderedDataStore).
     * [DataStoreKeyInfo](https://developer.roblox.com/en-us/api-reference/class/DataStoreKeyInfo) will also be `nil` if v2.0 experimental features are not enabled.
     *
     * Keys are cached locally for 4 seconds after the first read.
     * A [GlobalDataStore:GetAsync](https://developer.roblox.com/en-us/api-reference/function/GlobalDataStore/GetAsync) call within these 4 seconds returns a value from the cache.
     * Modifications to the key by [GlobalDataStore:SetAsync](https://developer.roblox.com/en-us/api-reference/function/GlobalDataStore/SetAsync) or [GlobalDataStore:UpdateAsync](https://developer.roblox.com/en-us/api-reference/function/GlobalDataStore/UpdateAsync|GlobalDataStore:UpdateAsync) apply to the cache immediately and restart the 4 second timer.
     *
     * ---
     * NOTICE
     * --------
     * To get a specific version, such as a version before the latest, use [DataStore:GetVersionAsync](https://developer.roblox.com/en-us/api-reference/function/DataStore/GetVersionAsync).
     *
     * ---
     * SEE ALSO
     * --------
     * - [Data Stores](https://developer.roblox.com/en-us/articles/Data-store), an in-depth guide on data structure, management, error handling, etc.
     * ---
     *
     * @param {string} key The key name for which the value is requested. If [DataStoreOptions.AllScopes](https://developer.roblox.com/en-us/api-reference/property/DataStoreOptions/AllScopes) was set to true when accessing the data store through [DataStoreService:GetDataStore](https://developer.roblox.com/en-us/api-reference/function/DataStoreService/GetDataStore), this key name must be prepended with the original scope as in “scope/key”.
     * @returns {[Variant, DataStoreKeyInfo]} The value of the entry in the data store with the given key and a [DataStoreKeyInfo](https://developer.roblox.com/en-us/api-reference/class/DataStoreKeyInfo) instance that includes the version number, date and time the version was created, and functions to retrieve [UserIds](https://developer.roblox.com/en-us/api-reference/property/Player/UserId) and [metadata](https://developer.roblox.com/en-us/articles/Data-store#metadata).
     * @yields This is a yielding function. When called, it will pause the JavaScript thread that called the function until a result is ready to be returned, without interrupting other scripts.
     */
    GetAsync<Variant extends any>(key: string): Promise<Variant | unknown>;
    /**
     *
     * This function sets the latest value, [UserIds](https://developer.roblox.com/en-us/api-reference/property/Player/UserId), and metadata for the given key.
     * Values in data stores are versioned,
     * meaning [GlobalDataStore:SetAsync](https://developer.roblox.com/en-us/api-reference/function/GlobalDataStore/SetAsync) will create a new version every time it is called.
     * Prior versions can be accessed through [DataStore:ListVersionsAsync](https://developer.roblox.com/en-us/api-reference/function/DataStore/ListVersionsAsync)/[DataStore:GetVersionAsync](https://developer.roblox.com/en-us/api-reference/function/DataStore/GetVersionAsync) for up to 30 days at which point they are permanently deleted.
     *
     * ---
     * WARNING
     * --------
     * [OrderedDataStore](https://developer.roblox.com/en-us/api-reference/class/OrderedDataStore) does not support v2.0 features such as versioning, so calling this method on an [OrderedDataStore](https://developer.roblox.com/en-us/api-reference/class/OrderedDataStore) key will overwrite the current value and make previous versions inaccessible.
     *
     * ---
     * CRITICAL
     * --------
     * If the previous value of the key is important,
     * use UpdateAsync() instead.
     * Using GetAsync() to retrieve a value and then setting the key with SetAsync() is risky because GetAsync() sometimes returns cached data and other game servers may have modified the key.
     *
     * ---
     * CRITICAL
     * --------
     * Metadata definitions must always be updated with a value, even if there are no changes to the current value; otherwise the current value will be lost.
     *
     * ---
     * ---
     * WARNING
     * -------
     * Any string being stored in a data store must be valid UTF-8.
     * In UTF-8,
     * values greater than 127 are used exclusively for encoding multi-byte codepoints,
     * so a single byte greater than 127 will not be valid UTF-8 and the SetAsync() attempt will fail.
     *
     * ---
     * SET VS. UPDATE
     * ------
     * [GlobalDataStore:SetAsync](https://developer.roblox.com/en-us/api-reference/function/GlobalDataStore/SetAsync) is best for a quick update of a specific key,
     * and it only counts against the write limit.
     * However, it may cause data inconsistency if two servers attempt to set the same key at the same time.
     * [GlobalDataStore:UpdateAsync](https://developer.roblox.com/en-us/api-reference/function/GlobalDataStore/UpdateAsync|GlobalDataStore:UpdateAsync) is safer for handling multi-server attempts because it reads the current key value (from whatever server last updated it) before making any changes.
     * However, it's somewhat slower because it reads before it writes, and it also counts against both the read and write limit.
     *
     * ---
     * SEE ALSO
     * --------
     * - [Data Stores](https://developer.roblox.com/en-us/articles/Data-store), an in-depth guide on data structure, management, error handling, etc.
     * ---
     *
     * @param {string} key Key name for which the value should be set. If [DataStoreOptions.AllScopes](https://developer.roblox.com/en-us/api-reference/property/DataStoreOptions/AllScopes) was set to true when accessing the data store through [DataStoreService:GetDataStore](https://developer.roblox.com/en-us/api-reference/function/DataStoreService/GetDataStore), this key name must be prepended with the original scope as in “scope/key”.
     * @param {Variant} value The value that the data store key will be set to.
     * @param {number[]} userIds Table of [UserIds](https://developer.roblox.com/en-us/api-reference/property/Player/UserId), highly recommended to assist with GDPR tracking/removal.
     * @param {DataStoreSetOptions} options (Optional) [DataStoreSetOptions](https://developer.roblox.com/en-us/api-reference/class/DataStoreSetOptions|DataStoreSetOptions) instance that allows for metadata specification on the key.
     * @yields This is a yielding function. When called, it will pause the JavaScript thread that called the function until a result is ready to be returned, without interrupting other scripts.
     * @returns {Variant} The version identifier of the newly created version. It can be used to retrieve key info using `GlobalDataStore/GetVersionAsync|GetVersionAsync()` or to remove it using `GlobalDataStore/RemoveVersionAsync|RemoveVersionAsync()`.
     * @unsafe For thread safety, this property is not safe to read in an unsynchronized thread
     */
    SetAsync<Variant extends any>(key: string, value: Variant, userIds?: number[], options?: DataStoreSetOptions): Promise<Variant | unknown>;
    /**
     * This function increments the value of a key by the provided amount (both must be integers).
     *
     * ---
     * WARNING
     * --------
     * [OrderedDataStore](https://developer.roblox.com/en-us/api-reference/class/OrderedDataStore) does not support v2.0 features such as versioning, so calling this method on an [OrderedDataStore](https://developer.roblox.com/en-us/api-reference/class/OrderedDataStore) key will overwrite the current value and make previous versions inaccessible.
     * ---
     *
     * ---
     * SEE ALSO
     * --------
     * - [Data Stores](https://developer.roblox.com/en-us/articles/Data-store), an in-depth guide on data structure, management, error handling, etc.
     * ---
     *
     * @param {string} key Key name for which the value should be updated. If [DataStoreOptions.AllScopes](https://developer.roblox.com/en-us/api-reference/property/DataStoreOptions/AllScopes) was set to true when accessing the data store through [DataStoreService:GetDataStore](https://developer.roblox.com/en-us/api-reference/function/DataStoreService/GetDataStore), this key name must be prepended with the original scope as in “scope/key”.
     * @param {number=1} delta 	Amount to increment the current value by.
     * @param {number[]} userIds Table of [UserIds](https://developer.roblox.com/en-us/api-reference/property/Player/UserId) to associate with the key.
     * @param {DataStoreSetOptions} options (Optional) [DataStoreIncrementOptions](https://developer.roblox.com/en-us/api-reference/class/DataStoreIncrementOptions) instance that combines multiple additional parameters as custom metadata and allows for future extensibility.
     * @yields This is a yielding function. When called, it will pause the JavaScript thread that called the function until a result is ready to be returned, without interrupting other scripts.
     * @returns {Variant} The updated value of the entry in the data store with the given key.
     * @unsafe For thread safety, this property is not safe to read in an unsynchronized thread.
     */
    IncrementAsync(key: string, delta?: number, userIds?: Array<number>, options?: DataStoreIncrementOptions): Promise<any>;
    /**
     * This function retrieves the value and metadata of a key from the data store and updates it with a new value determined by the callback function specified through the second parameter.
     * If the update succeeds, a new version of the value will be created and prior versions will remain accessible through [DataStore:ListVersionsAsync](https://developer.roblox.com/en-us/api-reference/function/DataStore/ListVersionsAsync) and [DataStore:GetVersionAsync](https://developer.roblox.com/en-us/api-reference/function/DataStore/GetVersionAsync).
     *
     * ---
     * WARNING
     * --------
     * [OrderedDataStore](https://developer.roblox.com/en-us/api-reference/class/OrderedDataStore) does not support v2.0 features such as versioning, so calling this method on an [OrderedDataStore](https://developer.roblox.com/en-us/api-reference/class/OrderedDataStore) key will overwrite the current value and make previous versions inaccessible.
     *
     * ---
     *
     * INFO
     * -----
     * In cases where another game server updated the key in the short timespan between retrieving the key's current value and setting the key's value,
     * [GlobalDataStore:UpdateAsync](https://developer.roblox.com/en-us/api-reference/function/GlobalDataStore/UpdateAsync|GlobalDataStore:UpdateAsync) will call the function again to ensure that no data is overwritten.
     * The function will be called as many times as needed until the data is saved.
     *
     * ---
     * CRITICAL
     * ---------
     * The function you define as the second parameter of UpdateAsync() cannot yield,
     * so do not include calls like setTimeout().
     *
     * ---
     * NOTICE
     * -------
     * Any string being stored in a data store must be valid UTF-8.
     * In UTF-8,
     * values greater than 127 are used exclusively for encoding multi-byte codepoints,
     * so a single byte greater than 127 will not be valid UTF-8 and the SetAsync() attempt will fail.
     *
     * ---
     * SET VS. UPDATE
     * ------
     * [GlobalDataStore:SetAsync](https://developer.roblox.com/en-us/api-reference/function/GlobalDataStore/SetAsync) is best for a quick update of a specific key,
     * and it only counts against the write limit.
     * However, it may cause data inconsistency if two servers attempt to set the same key at the same time.
     * [GlobalDataStore:UpdateAsync](https://developer.roblox.com/en-us/api-reference/function/GlobalDataStore/UpdateAsync|GlobalDataStore:UpdateAsync) is safer for handling multi-server attempts because it reads the current key value (from whatever server last updated it) before making any changes.
     * However, it's somewhat slower because it reads before it writes, and it also counts against both the read and write limit.
     *
     * ---
     * CALLBACK FUNCTION
     * -------
     * The callback function accepts two arguments:
     * - Current value of the key prior to the update.
     * - [DataStoreKeyInfo](https://developer.roblox.com/en-us/api-reference/class/DataStoreKeyInfo) instance that contains the latest version information (this argument can be ignored if metadata is not being used).
     *
     * In turn, the callback function returns up to three values:
     * - The new value to set for the key.
     * - An array of [UserIds](https://developer.roblox.com/en-us/api-reference/property/Player/UserId) to associate with the key. [DataStoreKeyInfo:GetUserIds](https://developer.roblox.com/en-us/api-reference/function/DataStoreKeyInfo/GetUserIds) should be returned unless the existing IDs are being changed; otherwise all existing IDs will be cleared.
     * - A Map containing metadata to associate with the key. [DataStoreKeyInfo:GetMetadata](https://developer.roblox.com/en-us/api-reference/function/DataStoreKeyInfo/GetMetadata) should be returned unless the existing metadata is being changed; otherwise all existing metadata will be cleared.
     *
     * ---
     * CRITICAL
     * -------
     * The callback function cannot yield, so do not include calls like wait().
     *
     * ---
     * SEE ALSO
     * --------
     * - [Data Stores](https://developer.roblox.com/en-us/articles/Data-store), an in-depth guide on data structure, management, error handling, etc.
     * ---
     *
     * @param {string} key Key name for which the value should be updated. If [DataStoreOptions.AllScopes](https://developer.roblox.com/en-us/api-reference/property/DataStoreOptions/AllScopes) was set to true when accessing the data store through [DataStoreService:GetDataStore](https://developer.roblox.com/en-us/api-reference/function/DataStoreService/GetDataStore), this key name must be prepended with the original scope as in “scope/key”.
     * @param {Function} transformFunction Transform function that takes the current value and [DataStoreKeyInfo](https://developer.roblox.com/en-us/api-reference/class/DataStoreKeyInfo) as parameters and returns the new value along with optional [UserIds](https://developer.roblox.com/en-us/api-reference/property/Player/UserId) and metadata.
     * @yields This is a yielding function. When called, it will pause the JavaScript thread that called the function until a result is ready to be returned, without interrupting other scripts.
     */
    UpdateAsync<Variant extends any>(key: string, transformFunction: (previousValue: Variant, keyInfo: DataStoreKeyInfo) => Variant): Promise<Variant | unknown>;
    /**
     * This function marks the specified key as deleted by creating a new “tombstone” version of the key.
     * Prior to this, it returns the latest version prior to the remove call.
     * After a key is removed via this function, [GlobalDataStore:GetAsync](https://developer.roblox.com/en-us/api-reference/function/GlobalDataStore/GetAsync) calls for the key will return nil.
     * Older versions of the key remain accessible through `GlobalDataStore/ListVersionsAsync` and `GlobalDataStore/GetVersionAsync`, assuming they have not expired.
     *
     * ---
     * WARNING
     * --------
     * [OrderedDataStore](https://developer.roblox.com/en-us/api-reference/class/OrderedDataStore) does not support versioning, so calling [GlobalDataStore:RemoveAsync](https://developer.roblox.com/en-us/api-reference/function/GlobalDataStore/RemoveAsync) on an [OrderedDataStore](https://developer.roblox.com/en-us/api-reference/class/OrderedDataStore) key will permanently delete it.
     *
     * Removed objects will be deleted permanently after 30 days.
     *
     * ---
     *
     * @param {string} key Key name to be removed. If [DataStoreOptions.AllScopes](https://developer.roblox.com/en-us/api-reference/property/DataStoreOptions/AllScopes) was set to true when accessing the data store through [DataStoreService:GetDataStore](https://developer.roblox.com/en-us/api-reference/function/DataStoreService/GetDataStore), this key name must be prepended with the original scope as in “scope/key”.
     * @returns {Variant} The value of the data store prior to deletion and a [DataStoreKeyInfo](https://developer.roblox.com/en-us/api-reference/class/DataStoreKeyInfo) instance that includes the version number, date and time the version was created, and functions to retrieve [UserIds](https://developer.roblox.com/en-us/api-reference/property/Player/UserId) and [metadata](https://developer.roblox.com/en-us/articles/Data-store#metadata).
     * @yields This is a yielding function. When called, it will pause the JavaScript thread that called the function until a result is ready to be returned, without interrupting other scripts.
     */
    RemoveAsync<Variant extends any>(key: string): Promise<Variant | unknown>;
    /**
     * This function sets **callback** as the function to be run any time the value associated with the [data store's](https://developer.roblox.com/en-us/api-reference/class/GlobalDataStore) key changes.
     * Once every minute, OnUpdate polls for changes by other servers.
     * Changes made on the same server will run the function immediately. In other words,
     * functions like [IncrementAsync()](https://developer.roblox.com/en-us/api-reference/function/GlobalDataStore/IncrementAsync), [SetAsync()](https://developer.roblox.com/en-us/api-reference/function/GlobalDataStore/SetAsync), and [UpdateAsync()](https://developer.roblox.com/en-us/api-reference/function/GlobalDataStore/UpdateAsync) change the key’s value in the data store and will cause the function to run.
     * See the [Data Stores](https://developer.roblox.com/en-us/articles/Data-store) article for an in-depth guide on data structure, management, error handling, etc.
     *
     * ---
     * CRITICAL
     * -------
     * It's recommended that you **disconnect** the connection when the subscription to the key is no longer needed.
     *
     * ---
     *
     * @param {string} key The key identifying the entry being retrieved from the data store
     * @param {Function} callback The function to be executed any time the value associated with **key** is changed
     * @returns {RBXScriptConnection} The connection to the key being tracked for updates
     * @deprecated This function has been deprecated and should not be used in new work. You can use the [Cross Server Messaging Service](https://www.npmjs.com/package/@mfd/rbxmessagingservice) to publish and subscribe to topics to receive near real-time updates, completely replacing the need for this function.
     */
    OnUpdate(key: string, callback: <Variant extends any>(newValue: Variant) => any): RBXScriptConnection;
}
