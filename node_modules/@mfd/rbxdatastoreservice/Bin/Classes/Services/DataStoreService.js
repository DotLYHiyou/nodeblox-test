"use strict";
// NOTICE Tag internal members as @internal or pull them out.
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataStoreService = exports.RequestType = void 0;
const GlobalDataStore_1 = require("../GlobalDataStore");
const Globals_1 = require("../../Util/Globals");
const OrderedDataStore_1 = require("../OrderedDataStore");
const DataStoreOptions_1 = require("../DataStoreOptions");
const FastLogTool_1 = require("../../Tools/FastLogTool");
const DataStore_1 = require("../DataStore");
const LuaWebService_1 = require("../LuaWebService");
const DataStoreListingPages_1 = require("../DataStoreListingPages");
const ApiDataStoresUrlConstruction_1 = require("../../Constructors/ApiDataStoresUrlConstruction");
const InputHelper_1 = require("../../Helpers/InputHelper");
const ErrorHelper_1 = require("../../Helpers/ErrorHelper");
const ErrorType_1 = require("../../Enumeration/ErrorType");
const AnalyticsHelper_1 = require("../../Helpers/AnalyticsHelper");
(0, FastLogTool_1.LOGGROUP)('DataStore');
(0, FastLogTool_1.DYNAMIC_FASTFLAGVARIABLE)('GetGlobalDataStorePcallFix', false);
(0, FastLogTool_1.DYNAMIC_FASTFLAGVARIABLE)('DataStoreLostDataFixEnable', false);
(0, FastLogTool_1.DYNAMIC_FASTFLAGVARIABLE)('DataStoresV2Enabled', true);
(0, FastLogTool_1.DYNAMIC_FASTFLAGVARIABLE)('DataStoresV2Force', true);
(0, FastLogTool_1.DYNAMIC_FASTINT)('DataStoreKeyLengthLimit');
/**
 * @internal
 */
var RequestType;
(function (RequestType) {
    RequestType[RequestType["GET_ASYNC"] = 5] = "GET_ASYNC";
    RequestType[RequestType["UPDATE_ASYNC"] = 6] = "UPDATE_ASYNC";
    RequestType[RequestType["SET_ASYNC"] = 7] = "SET_ASYNC";
    RequestType[RequestType["INCREMENT_ASYNC"] = 8] = "INCREMENT_ASYNC";
    RequestType[RequestType["GET_SORTED_ASYNC_PAGE"] = 9] = "GET_SORTED_ASYNC_PAGE";
})(RequestType = exports.RequestType || (exports.RequestType = {}));
/**
 * **DataStoreService** exposes methods for getting [GlobalDataStore](https://developer.roblox.com/en-us/api-reference/class/GlobalDataStore) and [OrderedDataStore](https://developer.roblox.com/en-us/api-reference/class/OrderedDataStore) objects.
 * See the [Data Stores](https://developer.roblox.com/en-us/articles/Data-store) article for an in-depth guide on data structure, management, error handling, etc.
 */
class DataStoreService {
    /**
     * @internal
     */
    static async checkStudioApiAccess(errorFunction) {
        let lws;
        if ((lws = new LuaWebService_1.LuaWebService()))
            if (!(await lws.IsApiAccessEnabled())) {
                if (errorFunction)
                    errorFunction(ErrorHelper_1.ErrorHelper.GetErrorMessage(ErrorType_1.ErrorType.NO_API_ACCESS_ALLOWED));
                return false;
            }
        return true;
    }
    /**
     * @internal
     */
    static useNewApi(options) {
        if ((0, FastLogTool_1.DFFlag)('DataStoresV2Enabled')) {
            if ((0, FastLogTool_1.DFFlag)('DataStoresV2Force')) {
                (0, FastLogTool_1.FASTLOG)(FastLogTool_1.FLog['DataStore'], '[FLog::DataStore] DataStoresV2Force is set, forcing new API');
                return true;
            }
            if (options instanceof DataStoreOptions_1.DataStoreOptions) {
                const eF = options.GetExperimentalFeatures();
                const it = eF.get('v2');
                if (it && typeof it === 'boolean')
                    if (it === true) {
                        AnalyticsHelper_1.Analytics.GoogleAnalytics.trackEvent('DataStores', 'DataStoreRequestsThatWereOptinNewAPI', '', 0);
                        return true;
                    }
                throw new ReferenceError(`Options instance of type ${options.constructor.name} did not request v2 API`);
            }
            else {
                if (options !== undefined && options !== null)
                    throw TypeError('Options instance not of type DataStoreOptions');
            }
        }
        return false;
    }
    /**
     * @internal
     */
    static getDataStoreInternal(name, scope, legacy, ordered, useNewApi, allScopes) {
        if (Globals_1.Globals.PlaceID < 1) {
            if ((0, FastLogTool_1.DFFlag)('GetGlobalDataStorePcallFix')) {
                throw new Error('Place has to be opened with Edit button to access DataStores');
            }
            console.error('Place has to be opened with Edit button to access DataStores');
            return process.exit(1);
        }
        if (legacy) {
            if (!this.legacyDataStore) {
                (0, FastLogTool_1.FASTLOG)(FastLogTool_1.FLog['DataStore'], '[FLog::DataStore] Creating legacy data store');
                this.legacyDataStore = new GlobalDataStore_1.GlobalDataStore(name, scope, true, allScopes);
            }
            return this.legacyDataStore;
        }
        else if (ordered) {
            const key = `${name}-${scope}`;
            const it = this.orderedDataStores.has(key);
            if (it === false) {
                (0, FastLogTool_1.FASTLOGS)(FastLogTool_1.FLog['DataStore'], '[FLog::DataStore] Creating data store, name: %s', name);
                const ds = new OrderedDataStore_1.OrderedDataStore(name, scope);
                this.orderedDataStores[key] = ds;
                return ds;
            }
            return this.orderedDataStores[key];
        }
        else {
            const key = `${name}-${scope}`;
            const it = this.dataStores.has(key);
            if (it === false) {
                (0, FastLogTool_1.FASTLOGS)(FastLogTool_1.FLog['DataStore'], '[FLog::DataStore] Creating data store, name: %s', name);
                let ds;
                if (!useNewApi) {
                    ds = new GlobalDataStore_1.GlobalDataStore(name, scope, false, allScopes);
                }
                else {
                    ds = new DataStore_1.DataStore(name, scope, false, allScopes);
                }
                this.dataStores[key] = ds;
                return ds;
            }
            return this.dataStores[key];
        }
    }
    // private static dataStoreJob: DataStoreJob;
    /**
     * This function returns the default [GlobalDataStore](https://developer.roblox.com/en-us/api-reference/class/GlobalDataStore).
     * If you want to access a specific **named** data store instead,
     * you should use the [GetDataStore()](https://developer.roblox.com/en-us/api-reference/function/DataStoreService/GetDataStore) function.
     * @returns {GlobalDataStore} Default [GlobalDataStore](https://developer.roblox.com/en-us/api-reference/class/GlobalDataStore) instance
     * @unsafe For thread safety, this property is not safe to read in an unsynchronized thread.
     */
    static GetGlobalDataStore() {
        return this.getDataStoreInternal('', 'u', true, false, false, false);
    }
    /**
     * This function creates a [GlobalDataStore](https://developer.roblox.com/en-us/api-reference/class/GlobalDataStore) instance with the provided name and scope.
     * Subsequent calls to this method with the same name/scope will return the same object.
     *
     * ---
     * NOTICE
     * --------
     * If v2.0 experimental features are enabled, this function creates and returns a [DataStore](https://developer.roblox.com/en-us/api-reference/class/DataStore) instance instead of a [GlobalDataStore](https://developer.roblox.com/en-us/api-reference/class/GlobalDataStore) instance.
     *
     * ---
     *
     * Using the `scope` parameter will restrict operations to that scope by automatically prepending the scope to keys in all operations done on the data store. This function also accepts an optional [DataStoreOptions](https://developer.roblox.com/en-us/api-reference/class/DataStoreOptions) instance which includes options for enabling [AllScopes](https://developer.roblox.com/en-us/api-reference/property/DataStoreOptions/AllScopes|AllScopes). See [here](https://developer.roblox.com/en-us/articles/Data-store#scope) for details on scope.
     * @param {string} name Name of the data store.
     * @param {string=} scope (Optional) A string specifying the scope.
     * @param {DataStoreOptions} (Optional) A [DataStoreOptions](https://developer.roblox.com/en-us/api-reference/class/DataStoreOptions) instance to enable experimental features and v2 API features.
     * @returns {GlobalDataStore} [GlobalDataStore](https://developer.roblox.com/en-us/api-reference/class/GlobalDataStore)
     * @unsafe For thread safety, this property is not safe to read in an unsynchronized thread.
     */
    static GetDataStore(name, scope = 'global', options = undefined) {
        InputHelper_1.InputHelper.CheckNameAndScope(name, scope, options);
        return this.getDataStoreInternal(name, scope, false, false, DataStoreService.useNewApi(options), options ? options.AllScopes : false);
    }
    /**
     * This method returns an [OrderedDataStore](https://developer.roblox.com/en-us/api-reference/class/OrderedDataStore),
     * similar to the way [GetDataStore()](https://developer.roblox.com/en-us/api-reference/function/DataStoreService/GetDataStore) does with [GlobalDataStores](https://developer.roblox.com/en-us/api-reference/class/GlobalDataStore).
     * Subsequent calls to this method with the same name/scope will return the same object.
     *
     * @param {string} name The name of the [OrderedDataStore](https://developer.roblox.com/en-us/api-reference/class/OrderedDataStore) you wish to get.
     * @param {string="global"} scope The scope of the [OrderedDataStore](https://developer.roblox.com/en-us/api-reference/class/OrderedDataStore) you wish to get, global by default
     * @returns {OrderedDataStore} [OrderedDataStore](https://developer.roblox.com/en-us/api-reference/class/OrderedDataStore)
     * @unsafe For thread safety, this property is not safe to read in an unsynchronized thread.
     */
    static GetOrderedDataStore(name, scope = 'global') {
        InputHelper_1.InputHelper.CheckNameAndScope(name, scope);
        return this.getDataStoreInternal(name, scope, false, true, false, false);
    }
    /**
     * @internal
     */
    static async GetDataFromEmptyScopeDataStoreAsyncTemporary(name, key) {
        return new Promise(async (resumeFunction, errorFunction) => {
            if (!(0, FastLogTool_1.DFFlag)('DataStoreLostDataFixEnable')) {
                errorFunction('GetDataFromEmptyScopeDataStoreAsyncTemporary is not enabled');
                return;
            }
            if (name.length == 0) {
                errorFunction("DataStore name can't be empty string");
                return;
            }
            if (name.length > (0, FastLogTool_1.DFInt)('DataStoreKeyLengthLimit')) {
                errorFunction('DataStore name is too long');
                return;
            }
            const ds = this.getDataStoreInternal(name, '', false, false, false, false);
            const value = await ds.GetAsync(key);
            resumeFunction(value);
        });
    }
    /**
     * Returns a [DataStoreListingPages](https://developer.roblox.com/en-us/api-reference/class/DataStoreListingPages) object for enumerating through all of the experience’s data stores.
     * It accepts an optional `prefix` parameter to only locate data stores whose names start with the provided prefix.
     *
     * ---
     * NOTICE
     * ------
     * Only data stores containing at least one object will be listed via this function.
     *
     * ---
     *
     * SEE ALSO
     * --------
     * - [Data Stores](https://developer.roblox.com/en-us/articles/Data-store), an in-depth guide on data structure, management, error handling, etc.
     * ---
     *
     * @param {string} prefix (Optional) Prefix to enumerate data stores that start with the given prefix.
     * @param {number} pageSize (Optional) Number of items to be returned in each page.
     * @returns {DataStoreListingPages} [DataStoreListingPages](https://developer.roblox.com/en-us/api-reference/class/DataStoreListingPages) instance containing (https://developer.roblox.com/en-us/api-reference/class/DataStoreInfo) instances that provide details such as name, creation time, and time last updated.
     * @yields This is a yielding function. When called, it will pause the Javascript thread that called the function until a result is ready to be returned, without interrupting other scripts.
     * @unsafe For thread safety, this property is not safe to read in an unsynchronized thread.
     */
    static async ListDataStoresAsync(prefix = '', pageSize = 0) {
        return new Promise(async (resumeFunction, errorFunction) => {
            if (!(0, FastLogTool_1.DFFlag)('DataStoresV2Enabled')) {
                errorFunction('400: API not supported');
                return;
            }
            if (!(await DataStoreService.checkStudioApiAccess(errorFunction)))
                return;
            const url = ApiDataStoresUrlConstruction_1.ApiDataStoresUrlConstruction.constructListKeysUrl(undefined, Globals_1.Globals.UniverseID, prefix, pageSize);
            const page = new DataStoreListingPages_1.DataStoreListingPages(this, url);
            await page
                .AdvanceToNextPageAsync()
                .then(() => resumeFunction(page))
                .catch(async (e) => {
                await AnalyticsHelper_1.Analytics.EphemeralCounter.reportCounter('DataStoreRequestsThatFailed_DataStoreService', 1);
                await AnalyticsHelper_1.Analytics.GoogleAnalytics.trackEvent('DataStores', 'FailedRequests', e !== undefined ? e.toString() : 'unknown', 0);
                errorFunction(e);
            });
        });
    }
}
exports.DataStoreService = DataStoreService;
/**
 * @internal
 */
DataStoreService.dataStores = new Map();
/**
 * @internal
 */
DataStoreService.orderedDataStores = new Map();
