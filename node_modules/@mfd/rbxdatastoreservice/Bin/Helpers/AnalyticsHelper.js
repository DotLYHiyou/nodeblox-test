"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Analytics = void 0;
const assert_1 = __importDefault(require("assert"));
const HttpRequest_1 = require("../Classes/HttpRequest");
const FastLogTool_1 = require("../Tools/FastLogTool");
const UrlTool_1 = require("../Tools/UrlTool");
const Globals_1 = require("../Util/Globals");
const HttpHelper_1 = require("./HttpHelper");
const fs_1 = require("fs");
(0, FastLogTool_1.DYNAMIC_LOGVARIABLE)('AnalyticsLog', 7);
// google analytics
(0, FastLogTool_1.DYNAMIC_LOGVARIABLE)('GoogleAnalyticsTracking', 7);
(0, FastLogTool_1.FASTFLAGVARIABLE)('GoogleAnalyticsTrackingEnabled', true);
(0, FastLogTool_1.FASTFLAGVARIABLE)('DebugAnalyticsForceLotteryWin', false);
(0, FastLogTool_1.DYNAMIC_FASTFLAGVARIABLE)('RobloxAnalyticsTrackingEnabled', true);
(0, FastLogTool_1.DYNAMIC_FASTFLAGVARIABLE)('DebugAnalyticsSendUserId', false);
(0, FastLogTool_1.FASTFLAGVARIABLE)('SendStudioEventsWithStudioSID', false);
(0, FastLogTool_1.FASTFLAGVARIABLE)('UseBuildGenericGameUrl', true);
(0, FastLogTool_1.DYNAMIC_FASTFLAGVARIABLE)('CloseOnAnalyticsAttemptToUseBeforeInitialization', true);
(0, FastLogTool_1.DYNAMIC_FASTFLAG)('AnalyticsEnabled');
/**
 * @internal
 */
async function httpHandler(url, params, optionalContentType, isGet) {
    const fullUrl = isGet ? (params !== undefined ? `${url}?${params}` : url) : url;
    const http = new HttpRequest_1.HttpRequest();
    http.url = fullUrl;
    http.method = isGet ? 'GET' : undefined;
    if (!isGet) {
        http.postData = params;
    }
    try {
        await http.execute(null);
    }
    catch (ex) {
        (0, FastLogTool_1.FASTLOGS)((0, FastLogTool_1.DFLog)('AnalyticsLog'), '[DFLog::AnalyticsLog] Exception in analytics httpHandler: %s', ex.message);
    }
}
/**
 * @internal
 */
var Analytics;
(function (Analytics) {
    /**
     * @internal
     */
    Analytics.staticmembers = {
        appVersion: null,
        reporter: null,
        location: null,
        userId: null,
        placeId: null,
    };
    function sanitizeParam(p) {
        const result = p;
        result.split(', ').join('');
        return result;
    }
    function setUserId(userId) {
        Analytics.staticmembers.userId = userId.toString();
    }
    Analytics.setUserId = setUserId;
    function setPlaceId(placeid) {
        Analytics.staticmembers.placeId = placeid.toString();
    }
    Analytics.setPlaceId = setPlaceId;
    function setAppVersion(appVersion) {
        Analytics.staticmembers.appVersion = sanitizeParam(appVersion);
    }
    Analytics.setAppVersion = setAppVersion;
    function setLocation(loc) {
        Analytics.staticmembers.location = sanitizeParam(loc);
    }
    Analytics.setLocation = setLocation;
    function setResporter(rep) {
        Analytics.staticmembers.reporter = sanitizeParam(rep);
    }
    Analytics.setResporter = setResporter;
    let EphemeralCounter;
    (function (EphemeralCounter) {
        const countersApiKey = '76E5A40C-3AE1-4028-9F10-7C62520BD94F';
        async function reportStats(category, value) {
            if ((0, FastLogTool_1.DFFlag)('AnalyticsEnabled')) {
                let baseUrl = UrlTool_1.BaseURL.GetBaseURL();
                const valueStr = value.toString();
                let url;
                if (FastLogTool_1.FFlag['UseBuildGenericGameUrl']) {
                    url = UrlTool_1.UrlHelper.BuildGenericGameUrl(`game/report-stats?name=${encodeURIComponent(category)}&value=${encodeURIComponent(valueStr)}`);
                }
                else {
                    url = `${baseUrl}/game/report-stats?name=${encodeURIComponent(category)}&value=${encodeURIComponent(valueStr)}`;
                }
                await httpHandler(url, '', HttpHelper_1.Http.kContentTypeUrlEncoded, false);
            }
        }
        EphemeralCounter.reportStats = reportStats;
        async function reportCountersCSV(counterNamesCSV) {
            if ((0, FastLogTool_1.DFFlag)('AnalyticsEnabled')) {
                const counterUrl = UrlTool_1.UrlHelper.GetCountersMultiIncrementUrl(countersApiKey);
                const data = 'counterNamesCsv=' + counterNamesCSV;
                await httpHandler(counterUrl, data, HttpHelper_1.Http.kContentTypeUrlEncoded, false);
            }
        }
        EphemeralCounter.reportCountersCSV = reportCountersCSV;
        async function reportCounter(counterName, amount) {
            if ((0, FastLogTool_1.DFFlag)('AnalyticsEnabled')) {
                const counterUrl = UrlTool_1.UrlHelper.GetCountersUrl(countersApiKey);
                const url = `${counterUrl}&counterName=${counterName}&amount=${amount}`;
                await httpHandler(url, '', HttpHelper_1.Http.kContentTypeUrlEncoded, false);
            }
        }
        EphemeralCounter.reportCounter = reportCounter;
    })(EphemeralCounter = Analytics.EphemeralCounter || (Analytics.EphemeralCounter = {}));
    let GoogleAnalytics;
    (function (GoogleAnalytics) {
        let initialized = false;
        let canUseGA = false;
        let canUserRobloxEvents = false;
        let googleClientID;
        let googleAccountPropertyID;
        let robloxProductName;
        let atteptedToUseBeforeInit = false;
        function generateClientID() {
            return Globals_1.Globals.GenerateUUID4();
        }
        function googleCollectionParams(hitType) {
            return `v=1&tid=${googleAccountPropertyID}&cid=${googleClientID}&t=${hitType}${(0, FastLogTool_1.DFFlag)('DebugAnalyticsSendUserId') && Globals_1.Globals.UserID !== 0 ? `&userId=${Globals_1.Globals.UserID}` : ''}`;
        }
        function init(accountPropertyID, productName) {
            if (atteptedToUseBeforeInit) {
                (0, FastLogTool_1.FASTLOG)((0, FastLogTool_1.DFLog)('AnalyticsLog'), '[DFLog::AnalyticsLog] Attempted to report analyics before init.');
                if ((0, FastLogTool_1.DFFlag)('CloseOnAnalyticsAttemptToUseBeforeInitialization')) {
                    process.exit(1);
                }
            }
            if (initialized) {
                (0, FastLogTool_1.FASTLOGS)(FastLogTool_1.DFLog['GoogleAnalyticsTracking'], '[DFLog::GoogleAnalyticsTracking] %s', 'Google analytics already initialized!');
                return;
            }
            robloxProductName = productName;
            googleAccountPropertyID = accountPropertyID;
            (0, assert_1.default)(googleAccountPropertyID.length > 0);
            let clientId;
            try {
                clientId = (0, fs_1.readFileSync)('./clientid.txt', 'utf-8');
            }
            catch {
                clientId = generateClientID();
                (0, fs_1.writeFileSync)('./clientid.txt', clientId);
            }
            googleClientID = clientId;
            (0, assert_1.default)(googleClientID.length > 0);
            initialized = true;
        }
        GoogleAnalytics.init = init;
        function getCanUse() {
            return canUseGA || canUserRobloxEvents;
        }
        GoogleAnalytics.getCanUse = getCanUse;
        function setCanUse() {
            canUseGA = true;
            canUserRobloxEvents = true;
        }
        GoogleAnalytics.setCanUse = setCanUse;
        async function sendEventGA(category, action, label, value) {
            const params = `${googleCollectionParams('event')}&ec=${category}&ea=${action}&ev=${value}&el=${label}`;
            await httpHandler(HttpHelper_1.Http.kGoogleAnalyticsBaseURL, params, HttpHelper_1.Http.kContentTypeDefaultUnspecified, false);
        }
        async function sendEventRoblox(category, action, label, value) {
            if (!initialized) {
                atteptedToUseBeforeInit = true;
                return;
            }
            if ((0, FastLogTool_1.DFFlag)('RobloxAnalyticsTrackingEnabled') && robloxProductName !== '') {
                await httpHandler(UrlTool_1.BaseURL.ConstructServicePathFromSubDomain('ecsv2', `${robloxProductName}/e.png`, { sessionId: googleClientID, userID: Globals_1.Globals.UserID, category, evt: action, label, value }, true, false, true), undefined, HttpHelper_1.Http.kContentTypeDefaultUnspecified, true);
            }
        }
        async function trackEvent(category, action, label, value) {
            if (!initialized) {
                atteptedToUseBeforeInit = true;
                return;
            }
            if (canUseGA) {
                await sendEventGA(category, action, label, value);
            }
            if (canUserRobloxEvents) {
                await sendEventRoblox(category, action, label, value);
            }
        }
        GoogleAnalytics.trackEvent = trackEvent;
        async function trackEventWithoutThrottling(category, action, label, value) {
            if (!initialized) {
                atteptedToUseBeforeInit = true;
                return;
            }
            await sendEventGA(category, action, label, value);
            await sendEventRoblox(category, action, label, value);
        }
        GoogleAnalytics.trackEventWithoutThrottling = trackEventWithoutThrottling;
        async function trackUserTiming(category, variable, milliseconds, label) {
            if (!initialized || !canUseGA) {
                return;
            }
            const params = `${googleCollectionParams('timing')}&utc=${category}&utv=${variable}&utt=${milliseconds}&utl=${label}`;
            httpHandler(HttpHelper_1.Http.kGoogleAnalyticsBaseURL, params, HttpHelper_1.Http.kContentTypeDefaultUnspecified, false);
        }
        GoogleAnalytics.trackUserTiming = trackUserTiming;
    })(GoogleAnalytics = Analytics.GoogleAnalytics || (Analytics.GoogleAnalytics = {}));
})(Analytics = exports.Analytics || (exports.Analytics = {}));
