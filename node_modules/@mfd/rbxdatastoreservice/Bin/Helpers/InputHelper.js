"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InputHelper = void 0;
const ErrorType_1 = require("../Enumeration/ErrorType");
const FastLogTool_1 = require("../Tools/FastLogTool");
const ErrorHelper_1 = require("./ErrorHelper");
(0, FastLogTool_1.DYNAMIC_FASTINTVARIABLE)('DataStoreKeyLengthLimit', 50);
/**
 * @internal
 */
class InputHelper {
    static CheckNameAndScope(name, scope, options) {
        let allScopes = false;
        if (options)
            allScopes = options.AllScopes;
        if (allScopes) {
            if (scope.length > 0)
                throw new Error('DataStore scope should be an empty string allScopes is set to true');
        }
        if (scope.length == 0 && !allScopes) {
            throw new Error("DataStore scope can't be empty string");
        }
        if (scope.length > (0, FastLogTool_1.DFInt)('DataStoreKeyLengthLimit') && !allScopes) {
            throw new Error('DataStore scope is too long');
        }
        if (name.length == 0) {
            throw new Error("DataStore name can't be empty string");
        }
        if (name.length > (0, FastLogTool_1.DFInt)('DataStoreKeyLengthLimit'))
            throw new Error('DataStore name is too long');
    }
    static CheckKey(key) {
        if (key.length === 0)
            return [false, ErrorHelper_1.ErrorHelper.GetErrorMessage(ErrorType_1.ErrorType.NO_EMPTY_KEYNAME)];
        if (key.length > (0, FastLogTool_1.DFInt)('DataStoreKeyLengthLimit'))
            return [false, ErrorHelper_1.ErrorHelper.GetErrorMessage(ErrorType_1.ErrorType.KEYNAME_TOO_LARGE)];
        return [true, ''];
    }
}
exports.InputHelper = InputHelper;
