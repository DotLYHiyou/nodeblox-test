import { DataStoreSetOptions } from './DataStoreSetOptions';
import { GlobalDataStore } from './GlobalDataStore';
import { DataStoreIncrementOptions } from './DataStoreIncrementOptions';
import { SortDirection } from '../Enumeration/SortDirection';
import { DataStoreKeyInfo } from './DataStoreKeyInfo';
import { DataStoreKeyPages } from './DataStoreKeyPages';
import { DataStoreVersionPages } from './DataStoreVersionPages';
export declare class DataStore extends GlobalDataStore {
    GetAsync<Variant extends any>(key: string): Promise<[Variant, DataStoreKeyInfo]>;
    SetAsync<Variant extends any>(key: string, value: Variant, userIds?: Array<number>, options?: DataStoreSetOptions): Promise<Variant>;
    RemoveAsync<Variant extends any>(key: string): Promise<[Variant, DataStoreKeyInfo]>;
    IncrementAsync(key: string, delta?: number, userIds?: Array<number>, options?: DataStoreIncrementOptions): Promise<[number, DataStoreKeyInfo]>;
    UpdateAsync<Variant extends any>(key: string, transformFunction: (previousValue: Variant, keyInfo: DataStoreKeyInfo) => Variant): Promise<Variant | unknown>;
    /**
     * This function retrieves the specified key version as well as a [DataStoreKeyInfo](https://developer.roblox.com/en-us/api-reference/class/DataStoreKeyInfo) instance.
     * A version identifier can be found through [DataStore:ListVersionsAsync](https://developer.roblox.com/en-us/api-reference/function/DataStore/ListVersionsAsync) or alternatively be the identifier returned by [GlobalDataStore:SetAsync](https://developer.roblox.com/en-us/api-reference/function/GlobalDataStore/SetAsync).
     *
     * ---
     * SEE ALSO
     * --------
     * - [Data Stores](https://developer.roblox.com/en-us/articles/Data-store), an in-depth guide on data structure, management, error handling, etc.
     * ---
     *
     * @param {string} key Key name for which the value should be updated. If [DataStoreOptions.AllScopes](https://developer.roblox.com/en-us/api-reference/property/DataStoreOptions/AllScopes) was set to true when accessing the data store through [DataStoreService:GetDataStore](https://developer.roblox.com/en-us/api-reference/function/DataStoreService/GetDataStore), this key name must be prepended with the original scope as in “scope/key”.
     * @param {string} version Version number of the key for which the version info is requested
     * @yields This is a yielding function. When called, it will pause the JavaScript thread that called the function until a result is ready to be returned, without interrupting other scripts.
     * @returns {[Variant, DataStoreKeyInfo]} The value of the key at the specified version and a [DataStoreKeyInfo](https://developer.roblox.com/en-us/api-reference/class/DataStoreKeyInfo) instance that includes the version number, date and time the version was created, and functions to retrieve [UserIds](https://developer.roblox.com/en-us/api-reference/property/Player/UserId) and metadata.
     */
    GetVersionAsync<Variant extends any>(key: string, version?: string): Promise<[Variant, DataStoreKeyInfo]>;
    /**
     * This function returns a [DataStoreKeyPages](https://developer.roblox.com/en-us/api-reference/class/DataStoreKeyPages) object for enumerating through keys of a data store.
     * It accepts an optional `prefix` parameter to only locate data stores whose names start with the provided prefix.
     * If [DataStoreOptions.AllScopes](https://developer.roblox.com/en-us/api-reference/property/DataStoreOptions/AllScopes) was set to true when accessing the data store through [DataStoreService:GetDataStore](https://developer.roblox.com/en-us/api-reference/function/DataStoreService/GetDataStore), keys will be returned with all scopes as prefixes.
     *
     * SEE ALSO
     * --------
     * - [Data Stores](https://developer.roblox.com/en-us/articles/Data-store), an in-depth guide on data structure, management, error handling, etc.
     * ---
     *
     * @param {string} prefix (Optional) Prefix to use for locating keys.
     * @param {number} pageSize (Optional) Number of items to be returned in each page.
     * @returns {DataStoreKeyPages} A [DataStoreKeyPages](https://developer.roblox.com/en-us/api-reference/class/DataStoreKeyPages) instance that enumerates the keys as [DataStoreKey](https://developer.roblox.com/en-us/api-reference/class/DataStoreKey) instances.
     * @yields This is a yielding function. When called, it will pause the Javascript thread that called the function until a result is ready to be returned, without interrupting other scripts.
     * @unsafe For thread safety, this property is not safe to read in an unsynchronized thread.
     */
    ListKeysAsync(prefix?: string, pageSize?: number): Promise<DataStoreKeyPages>;
    /**
     * This function enumerates versions of the specified key in either ascending or descending order specified by an [SortDirection](https://developer.roblox.com/en-us/api-reference/enum/SortDirection) parameter.
     * It can optionally filter the returned versions by minimum and maximum timestamp.
     *
     * SEE ALSO
     * --------
     * - [Data Stores](https://developer.roblox.com/en-us/articles/Data-store), an in-depth guide on data structure, management, error handling, etc.
     * ---
     *
     * @param {string} key Key name for the versions to list. If [DataStoreOptions.AllScopes](https://developer.roblox.com/en-us/api-reference/property/DataStoreOptions/AllScopes) was set to true when accessing the data store through [DataStoreService:GetDataStore](https://developer.roblox.com/en-us/api-reference/function/DataStoreService/GetDataStore), this key name must be prepended with the original scope as in “scope/key”.
     * @param {SortDirection?} sortDirection (Optional) Enum specifying ascending or descending sort order. Default is ascending.
     * @param {number} minDate (Optional) Date after which the versions should be listed.
     * @param {number} maxDate (Optional) Date up to which the versions should be listed.
     * @param {number} pageSize (Optional) Number of items to be returned in each page.
     * @returns {DataStoreVersionPages} A [DataStoreVersionPages](https://developer.roblox.com/en-us/api-reference/class/DataStoreVersionPages) instance that enumerates all the versions of the key as [DataStoreObjectVersionInfo](https://developer.roblox.com/en-us/api-reference/class/DataStoreObjectVersionInfo) instances.
     * @yields This is a yielding function. When called, it will pause the Javascript thread that called the function until a result is ready to be returned, without interrupting other scripts.
     * @unsafe For thread safety, this property is not safe to read in an unsynchronized thread.
     */
    ListVersionsAsync(key: string, sortDirection?: SortDirection, minDate?: number, maxDate?: number, pageSize?: number): Promise<DataStoreVersionPages>;
    /**
     * This function permanently deletes the specified version of a key. Version identifiers can be found through [DataStore:ListVersionsAsync](https://developer.roblox.com/en-us/api-reference/function/DataStore/ListVersionsAsync).
     *
     * Unlike [GlobalDataStore:RemoveAsync](https://developer.roblox.com/en-us/api-reference/function/GlobalDataStore/RemoveAsync), this function does not create a new “tombstone” version and the removed value cannot be retrieved later.
     *
     * SEE ALSO
     * --------
     * - [Data Stores](https://developer.roblox.com/en-us/articles/Data-store), an in-depth guide on data structure, management, error handling, etc.
     * ---
     *
     * @param {string} key Key name for which a version is to be removed. If [DataStoreOptions.AllScopes](https://developer.roblox.com/en-us/api-reference/property/DataStoreOptions/AllScopes) was set to true when accessing the data store through [DataStoreService:GetDataStore](https://developer.roblox.com/en-us/api-reference/function/DataStoreService/GetDataStore), this key name must be prepended with the original scope as in “scope/key”.
     * @param {string} version Version number of the key to remove.
     * @returns {void} No return.
     * @yields This is a yielding function. When called, it will pause the JavaScript thread that called the function until a result is ready to be returned, without interrupting other scripts.
     */
    RemoveVersionAsync(key: string, version: string): Promise<void>;
}
